// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: note.sql

package generated

import (
	"context"
)

const createNote = `-- name: CreateNote :one
INSERT INTO tbl_note (tweetId, content)
VALUES ($1, $2)
RETURNING id, tweetid, content
`

type CreateNoteParams struct {
	Tweetid *int64 `json:"tweetid"`
	Content string `json:"content"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (TblNote, error) {
	row := q.db.QueryRow(ctx, createNote, arg.Tweetid, arg.Content)
	var i TblNote
	err := row.Scan(&i.ID, &i.Tweetid, &i.Content)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM tbl_note WHERE id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteNote, id)
	return err
}

const getAllNotes = `-- name: GetAllNotes :many
SELECT id, tweetid, content FROM tbl_note
`

func (q *Queries) GetAllNotes(ctx context.Context) ([]TblNote, error) {
	rows, err := q.db.Query(ctx, getAllNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TblNote{}
	for rows.Next() {
		var i TblNote
		if err := rows.Scan(&i.ID, &i.Tweetid, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNoteByID = `-- name: GetNoteByID :one
SELECT id, tweetid, content FROM tbl_note WHERE id = $1
`

func (q *Queries) GetNoteByID(ctx context.Context, id int64) (TblNote, error) {
	row := q.db.QueryRow(ctx, getNoteByID, id)
	var i TblNote
	err := row.Scan(&i.ID, &i.Tweetid, &i.Content)
	return i, err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE tbl_note
SET tweetId = $2, content = $3
WHERE id = $1
`

type UpdateNoteParams struct {
	ID      int64  `json:"id"`
	Tweetid *int64 `json:"tweetid"`
	Content string `json:"content"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.Exec(ctx, updateNote, arg.ID, arg.Tweetid, arg.Content)
	return err
}

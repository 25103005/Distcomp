// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: label.sql

package generated

import (
	"context"
)

const createLabel = `-- name: CreateLabel :one
INSERT INTO tbl_label (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateLabel(ctx context.Context, name string) (TblLabel, error) {
	row := q.db.QueryRow(ctx, createLabel, name)
	var i TblLabel
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteLabel = `-- name: DeleteLabel :exec
DELETE FROM tbl_label WHERE id = $1
`

func (q *Queries) DeleteLabel(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteLabel, id)
	return err
}

const getAllLabels = `-- name: GetAllLabels :many
SELECT id, name FROM tbl_label
`

func (q *Queries) GetAllLabels(ctx context.Context) ([]TblLabel, error) {
	rows, err := q.db.Query(ctx, getAllLabels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TblLabel{}
	for rows.Next() {
		var i TblLabel
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLabelByID = `-- name: GetLabelByID :one
SELECT id, name FROM tbl_label WHERE id = $1
`

func (q *Queries) GetLabelByID(ctx context.Context, id int64) (TblLabel, error) {
	row := q.db.QueryRow(ctx, getLabelByID, id)
	var i TblLabel
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateLabel = `-- name: UpdateLabel :exec
UPDATE tbl_label
SET name = $2
WHERE id = $1
`

type UpdateLabelParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateLabel(ctx context.Context, arg UpdateLabelParams) error {
	_, err := q.db.Exec(ctx, updateLabel, arg.ID, arg.Name)
	return err
}

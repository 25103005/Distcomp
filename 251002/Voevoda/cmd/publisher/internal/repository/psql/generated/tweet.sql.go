// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tweet.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTweet = `-- name: CreateTweet :one
INSERT INTO tbl_tweet (user_id, title, content, created, modified)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, title, content, created, modified
`

type CreateTweetParams struct {
	UserID   *int64           `json:"user_id"`
	Title    string           `json:"title"`
	Content  string           `json:"content"`
	Created  pgtype.Timestamp `json:"created"`
	Modified pgtype.Timestamp `json:"modified"`
}

func (q *Queries) CreateTweet(ctx context.Context, arg CreateTweetParams) (TblTweet, error) {
	row := q.db.QueryRow(ctx, createTweet,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.Created,
		arg.Modified,
	)
	var i TblTweet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Created,
		&i.Modified,
	)
	return i, err
}

const deleteTweet = `-- name: DeleteTweet :exec
DELETE FROM tbl_tweet WHERE id = $1
`

func (q *Queries) DeleteTweet(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTweet, id)
	return err
}

const getAllTweets = `-- name: GetAllTweets :many
SELECT id, user_id, title, content, created, modified FROM tbl_tweet
`

func (q *Queries) GetAllTweets(ctx context.Context) ([]TblTweet, error) {
	rows, err := q.db.Query(ctx, getAllTweets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TblTweet{}
	for rows.Next() {
		var i TblTweet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Created,
			&i.Modified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTweetByID = `-- name: GetTweetByID :one
SELECT id, user_id, title, content, created, modified FROM tbl_tweet WHERE id = $1
`

func (q *Queries) GetTweetByID(ctx context.Context, id int64) (TblTweet, error) {
	row := q.db.QueryRow(ctx, getTweetByID, id)
	var i TblTweet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Created,
		&i.Modified,
	)
	return i, err
}

const updateTweet = `-- name: UpdateTweet :exec
UPDATE tbl_tweet
SET user_id = $2, title = $3, content = $4, modified = $5
WHERE id = $1
`

type UpdateTweetParams struct {
	ID       int64            `json:"id"`
	UserID   *int64           `json:"user_id"`
	Title    string           `json:"title"`
	Content  string           `json:"content"`
	Modified pgtype.Timestamp `json:"modified"`
}

func (q *Queries) UpdateTweet(ctx context.Context, arg UpdateTweetParams) error {
	_, err := q.db.Exec(ctx, updateTweet,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.Modified,
	)
	return err
}

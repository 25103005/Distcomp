// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package generated

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO tbl_user (login, password, firstname, lastname)
VALUES ($1, $2, $3, $4)
RETURNING id, login, password, firstname, lastname
`

type CreateUserParams struct {
	Login     string `json:"login"`
	Password  string `json:"password"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (TblUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Login,
		arg.Password,
		arg.Firstname,
		arg.Lastname,
	)
	var i TblUser
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM tbl_user WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, login, password, firstname, lastname FROM tbl_user
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]TblUser, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TblUser{}
	for rows.Next() {
		var i TblUser
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Password,
			&i.Firstname,
			&i.Lastname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, login, password, firstname, lastname FROM tbl_user WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (TblUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i TblUser
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE tbl_user
SET login = $2, password = $3, firstname = $4, lastname = $5
WHERE id = $1
`

type UpdateUserParams struct {
	ID        int64  `json:"id"`
	Login     string `json:"login"`
	Password  string `json:"password"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Login,
		arg.Password,
		arg.Firstname,
		arg.Lastname,
	)
	return err
}

services:
  distcomp:
    image: khmelov/distcomp
    container_name: distcomp
    restart: unless-stopped

    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

    networks:
      - dist_net

    ports:
      - 24100:24100

  api:
    image: distcomp/api
    container_name: api
    restart: unless-stopped

    environment:
      API_STORAGE_TYPE: postgres
      API_STORAGE_HOST: db
      API_STORAGE_PORT: ${POSTGRES_PORT}
      API_STORAGE_USER: ${POSTGRES_USER}
      API_STORAGE_PASSWORD: ${POSTGRES_PASSWORD}
      API_STORAGE_DBNAME: ${POSTGRES_DB}
      API_KAFKA_BROKERS: ${KAFKA_BROKERS}
      API_KAFKA_TOPIC: ${KAFKA_TOPIC}
      API_NOTICE_SERVICE_ADDR: ${API_NOTICE_SERVICE_ADDR}

    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

    networks:
      - api_net
      - db_net
      - kafka_net

    ports:
      - 24110:24110

    depends_on:
      migrator:
        condition: service_completed_successfully
      db:
        condition: service_healthy

  migrator:
    image: gomicro/goose:3.24.1
    container_name: migrator

    environment:
      GOOSE_DRIVER: "postgres"
      GOOSE_DBSTRING: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
      GOOSE_MIGRATION_DIR: "/migrations"

    networks:
      - db_net

    volumes:
      - "./migrations/postgres:/migrations:ro"

    command: [ "goose", "up" ]

    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:16.0-alpine
    container_name: db
    restart: unless-stopped

    environment:
      PGDATA: ${POSTGRES_DATA}
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G

    networks:
      - db_net
    ports:
      - 5432:5432

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  notice:
    image: distcomp/notice
    container_name: notice_api
    restart: unless-stopped

    environment:
      NOTICE_API_CASSANDRA_ADDRS: ${CASSANDRA_ADDRS}
      NOTICE_API_CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
      NOTICE_API_CASSANDRA_USER: ${CASSANDRA_USER}
      NOTICE_API_CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
      NOTICE_API_KAFKA_BROKERS: ${KAFKA_BROKERS}
      NOTICE_API_KAFKA_TOPIC: ${KAFKA_TOPIC}

    deploy:
      resources:
        limits: 
          cpus: "0.5"
          memory: 512M

    networks:
      - api_net
      - db_net
      - kafka_net
      
    ports:
      - 24130:24130

    depends_on:
      cassandra:
        condition: service_healthy

  cassandra:
    image: bitnami/cassandra:5.0.3-debian-12-r5
    container_name: cassandra_db
    hostname: cassandra
    restart: unless-stopped

    environment:
      CASSANDRA_USER: ${CASSANDRA_USER}
      CASSANDRA_HOST: cassandra
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
      CASSANDRA_CLUSTER_NAME: ${CASSANDRA_CLUSTER_NAME}
      CASSANDRA_PASSWORD_SEEDER: yes

    volumes:
      - ./migrations/cassandra:/docker-entrypoint-initdb.d

    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 4G

    networks:
      - db_net

    ports:
      - 9042:9042

    healthcheck:
      test: [ "CMD-SHELL",  "nodetool", "status" ]
      interval: 30s 
      timeout: 20s
      retries: 5
      start_period: 60s

  kafka:
    image: bitnami/kafka:latest
    container_name: notice_kafka
    hostname: kafka
    restart: unless-stopped

    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CLIENT_USERS: admin
      KAFKA_CLIENT_PASSWORDS: admin
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9094
      KAFKA_CFG_LISTENERS: INT://kafka:9092,PLAINTEXT://kafka:9093,CONTROLLER://kafka:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: INT://localhost:9092,PLAINTEXT://kafka:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      ALLOW_PLAINTEXT_LISTENER: yes

    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G

    networks:
      - kafka_net

    ports:
      - 9092:9092

networks:
  kafka_net:
  db_net:
  api_net:
  dist_net:
